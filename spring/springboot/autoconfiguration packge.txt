

autoconfiguration packge

1 org.springframework.boot.autoconfigure.condition
interface Condition 接口 判断Bean 是否注册Factory
	matches 判断Bean 是否满足 ConditionContext , AnnotatedTypeMetadata 配置数据 

ConfigurationCondition 继承Condition 细粒度的控制。 configuration 不同状态
	ConfigurationPhrase : 1 PARSE_CONFIGURATION class 不存在 不会 load @Configuration  2 REGISTER_BEAN 当前 All @configuration 被注册。

@Conditional value 对应的Condition 的实现, 判定Bean 是否满足注册条件
	通过Condition 编程方式判定。 使用 1. @Component @Configuration 注解 2 自定义注解 3 函数级别@Bean 定义

AnnotatedTypeMetadata 
	MethodMetadata AnnotationMetadata 注解方式配置类型

@ConditionOnClass @ConditionalOnMissingClass
	classpath 是否包含 value(class) 判定注解。 

OnClassCondition AutoConfigurationImportFilter 校验class 是否存在
	AutoConfigurationImportFilter 自动引入的Configuration class 判定Condition， （demo, class 存在的条件 ， 添加某个 Configuration配置Class 文件）
		启动了连个线程 判定Configuration是否要映入
	GetOutcomesThread 线程执行 outcomes 判断是否存在 
		ClassLoader 去load 对应的Class ClassNotFoundException 跑出异常，class not found （同事对应 ConditionOnClass ConditionOnMissingClass 配置方式）

@ConditionOnBean @ConditionOnMissingBean @ConditionalOnSingleCandidate(容器执行一个多个， 指定Bean 的类型)
	判断Bean class or name 是否Load 到了BeanFactory 中(!! 推荐 仅仅 在 auto-class 加上该注解. 如果在 Bean 上加，当前Condition 确保在 another auto-configuration 后)
	ConfigurationPhrase register_bean 阶段 ，所有的configuration loaded

@ConditionalOnCloudPlatform OnCloudPlatformCondition cloudPlatform 判断校验 env 参数配置校验。

@ConditionalOnExpression SPEL condition 通过SPEL 表达是判断是否存在 BeanExpressionResolver（TODO check SPEL　表达式的存在方式）

ConditionalOnJava java version 启动判定 java 的版本配置

ConditionalOnJndi j2ee 规范， 

OnWebApplicationCondition 注解 @ConditionalOnNotWebApplication @ConditionalOnWebApplication 不同的情况 执行是否Web 环境配置
	GenericWebApplicationContext 判定当前ApplicationContext 的环境判定， 

@ConditionalOnProperty @ConditionalOnResource 判定Resource， Properties 存在条件


	abstract class SpringBootCondition spring boot 帮用户定义Classes 是否Load
		getMatchOutcome 抽象 子类判定， AnnotatedTypeMetadata 数据类型是否 满足。 结果 ConditionOutcome 满足条件
		提供Matcher 判断配置操作

ConditionEvaluationReport bean 记录评估 Condition bean 配置生成的细节 （TODO）
ConditionMessage 流方式 构建 Condition 结果信息

 AbstractNestedCondition 内嵌的Condition 条件判断方式， 多条件的Nested 的判定方式。
	MemberOutcomes 多个Condition 结果判定。 
	MemberConditions 不同的Metadata 配置注解类型， 对应的MemberOutcomes 输出结果信息。
		ConditionClass 中 包含 多个 static class, 对应的注解配置信息， 获取Member Class 配置信息。 校验MemberClass 注解配置成功失败。
	MemberMatchOutcomes memberClass 中包含多个Condition Class 判断， 记录成功失败的结果配置信息。
	getFinalMatchOutcome 该类的抽象函数， class 包含MemberClass 判定 最终的 Condition

	子类 AllNestedConditions， AnyNestedCondition， NoneNestedConditions all many none 的判定条件。

BeanTypeRegistry beanFactiory 对应的注册 Type 对应的功能性扩充。
	获取对应的 注解， Class 对应的 Bean的 类型。

ConditionEvaluationReportAutoConfigurationImportListener condition report event 监听

SearchStratage 搜索配置策略：
	current 当前的Context,  ANCESTORS， ALL 当前 + ancestors


2 org.springframework.boot.autoconfigure 基础的配置信息：

@AutoConfigurationPackage 注解该包 包含Configuration 应当生成Bean的 配置方式
	BasePackages 需要扫描的 package 课程包内容。	PackageImport 通过Metadata 获取Class 对应的Package 数据包下的内容。
ImportBeanDefinitionRegistrar 添加用户自定义的Bean的 配置信息

@AutoConfigurationMetadata  配置文件 获取 MetadataAuto Configuration 的配置信息。
AutoConfigurationMetadataLoader 在 META-INF/spring-autoconfigure-metadata.properties 配置文件中 Class 对应的属性读取， 查看。

AutoConfigureAfter ， AutoConfigureBefore，AutoConfigureOrder， 在 @EnableAutoConfiguration 配置上建立 解析的依赖配置方式。
	AutoConfigurationSorter 排序 有@EnableAutoConfiguration注解的 配置Bean， 通过 上面三个 注解进行排序

@EnableAutoConfiguration spring application 注入你需要的 Bean 的配置信息。
	加载注解 当前包 root 下的bean 配置信息， 

3. spring 包 基础配置
	spring.factories 对应spring 制动配置bean Configuration 路径信息
	spring-autoconfiguration-metadata.properties 对应配置信息

4. admin mail mobile 提供不同的 Configuration 配置信息， 配置对应的数据源
	定义不同的Condition 对应的判定条件




